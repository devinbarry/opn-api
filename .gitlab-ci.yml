stages:
  - test
  - sync
  - build
  - publish

test_opn_api:
  stage: test
  image: python:3.12
  tags:
    - python
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: on_success
  before_script:
    - python --version
    - pip --version
  script:
    - pip install pytest
    # Install opn_api in editable mode
    - pip install -e .
    # Run all tests
    - pytest

# Push master branch to GitHub
sync_to_github:
  stage: sync
  image: alpine:latest
  needs:
    - test_opn_api
  variables:
    GIT_STRATEGY: clone    # Make sure we get a proper clone
    GIT_CHECKOUT: "true"   # Ensure GitLab CI checks out the commit
  rules:
    - if: '$SKIP_SYNC == "true"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: on_success
    - when: never
  before_script:
    - apk add --no-cache git openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$GITHUB_SSH_PUSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "devinbarry@users.noreply.github.com"
    - git config --global user.name "Devin Barry"
    # Print debugging information
    - git branch -a
    - git status
  script:
    - bash ./scripts/sync_github.sh

build_and_publish_internal:
  image: python:3.12
  stage: build
  needs:
    - test_opn_api
  tags:
    - python
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: on_success
      exists:
        - src/opn_api/__init__.py
  before_script:
    - apt-get update && apt-get install -y jq git
    # Get the project version from internal PyPI
    - export PYPI_PROJECT_VERSION=$(curl $UNOBTAIN_INDEX_URL/opn-api/json | jq -r '.info.version')
    - echo "PyPI project version - $PYPI_PROJECT_VERSION"
    # Get the project version from the project source code
    - export PROJECT_VERSION=$(grep "__version__" src/opn_api/__init__.py | awk -F "[\"']" '{print $2}')
    - echo "Project version - $PROJECT_VERSION"
    - |
      if [ -z "${PROJECT_VERSION}" ]; then
        echo "ERROR: PROJECT_VERSION is empty"
        exit 1
      fi
    # Check if a tag exists for this version
    - git fetch --prune --prune-tags origin
    - export HAS_VERSION_TAG=$(git tag -l "v$PROJECT_VERSION" | wc -l)
    - echo "Has version tag? $HAS_VERSION_TAG"
    # Check if version already exists on internal PyPI
    - |
      if [ "$PYPI_PROJECT_VERSION" == "$PROJECT_VERSION" ]; then
        echo "Version $PROJECT_VERSION already exists on internal PyPI, skipping publish"
        export SKIP_INTERNAL_PUBLISH="true"
      else
        export SKIP_INTERNAL_PUBLISH="false"
      fi
  script:
    - pip install hatch
    - hatch build
    - |
      if [ "$SKIP_INTERNAL_PUBLISH" == "true" ]; then
        echo "Skipping internal PyPI publish"
      else
        echo "Publishing to internal PyPI server"
        hatch publish --repo $PYPI_REPO_URL --user $PYPI_REPO_USER --auth $PYPI_REPO_AUTH
      fi
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

publish_to_test_pypi:
  stage: publish
  image: python:3.12
  needs:
    - build_and_publish_internal
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: on_success
  before_script:
    - apt-get update && apt-get install -y jq git
    - export PROJECT_VERSION=$(grep "__version__" src/opn_api/__init__.py | awk -F "[\"']" '{print $2}')
    # Get the project version from TestPyPI
    - export TESTPYPI_PROJECT_VERSION=$(curl https://test.pypi.org/pypi/opn-api/json 2>/dev/null | jq -r '.info.version' || echo "not-found")
    - echo "TestPyPI project version - $TESTPYPI_PROJECT_VERSION"
    - echo "Project version - $PROJECT_VERSION"
    - |
      if [ "$TESTPYPI_PROJECT_VERSION" == "$PROJECT_VERSION" ]; then
        echo "Version $PROJECT_VERSION already exists on TestPyPI, skipping upload"
        export SKIP_TESTPYPI_UPLOAD="true"
      else
        export SKIP_TESTPYPI_UPLOAD="false"
      fi
  script:
    - |
      if [ "$SKIP_TESTPYPI_UPLOAD" == "true" ]; then
        echo "Skipping TestPyPI upload"
        exit 0
      fi
    - export TWINE_USERNAME="__token__"
    - export TWINE_PASSWORD="$PYPI_TEST_API_TOKEN"
    - pip install twine
    - twine upload --verbose --non-interactive -r testpypi dist/*

publish_to_prod_pypi:
  stage: publish
  image: python:3.12
  needs:
    - build_and_publish_internal
    - publish_to_test_pypi
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: on_success
  before_script:
    - apt-get update && apt-get install -y jq git
    - export PROJECT_VERSION=$(grep "__version__" src/opn_api/__init__.py | awk -F "[\"']" '{print $2}')
    # Check if a tag exists for this version
    - git fetch --prune --prune-tags origin
    - export HAS_VERSION_TAG=$(git tag -l "v$PROJECT_VERSION" | wc -l)
    - echo "Has version tag? $HAS_VERSION_TAG"
    - |
      if [ "$HAS_VERSION_TAG" -eq "0" ]; then
        echo "No tag exists for version v$PROJECT_VERSION, skipping production PyPI publish"
        exit 0
      fi
    # Get the project version from PyPI
    - export PYPI_PROJECT_VERSION=$(curl https://pypi.org/pypi/opn-api/json 2>/dev/null | jq -r '.info.version' || echo "not-found")
    - echo "PyPI project version - $PYPI_PROJECT_VERSION"
    - echo "Project version - $PROJECT_VERSION"
    - |
      if [ "$PYPI_PROJECT_VERSION" == "$PROJECT_VERSION" ]; then
        echo "Version $PROJECT_VERSION already exists on PyPI, skipping upload"
        export SKIP_PYPI_UPLOAD="true"
      else
        export SKIP_PYPI_UPLOAD="false"
      fi
  script:
    - |
      if [ "$SKIP_PYPI_UPLOAD" == "true" ]; then
        echo "Skipping PyPI upload"
        exit 0
      fi
    - export TWINE_USERNAME="__token__"
    - export TWINE_PASSWORD="$PYPI_PROD_API_TOKEN"
    - pip install twine
    - twine upload --non-interactive -r pypi dist/*
